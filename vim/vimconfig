set nu!                                             " 显示行号
filetype on                                         " 侦测文件类型
filetype indent on                                  " 为特定文件类型载入相关缩进文件
syntax on                                           " 语法高亮syntax enable
"syntax enable
"set background=dark

colorscheme desert                                  " vim配色

"colorscheme darkblue
"colorscheme evening
"colorscheme torte
"colorscheme murphy
"colorscheme solarized

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"状态栏设置
set laststatus=2                                    " 总是显示状态栏
set ruler                                           " 在编辑过程中，在右下角显示光标位置的状态行
highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"获取当前路径，将$HOME转化为~
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "g")
    return curdir
endfunction
set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c,%L\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\ \".&fenc)}\ \|\ %{$USER}\ @\ %{hostname()}\

"状态行颜色
"highlight StatusLine   guifg=SlateBlue guibg=Yello
"highlight StatusLineNC guifg=Gray      guibg=White

au BufNewFile,BufRead *.pc  set filetype=esqlc      " 设置pc文件等同于c文件
set clipboard+=unnamed                              " 与windows共享剪贴板
set iskeyword+=_,$,@,%,#,-                          " 带有如下符号的单词不要被换行分割
set viminfo+=!                                      " 保存全局变量
set cursorline                                      " a 高亮光标所在的行
set showcmd                                         " a 状态栏显示目前所执行的指令
set cmdheight=2                                     " 命令行（在状态行下）的高度，默认为1，这里是2
set backspace=2                                     " 使回格键（backspace）正常处理indent, eol, start等
set whichwrap+=h,l                                  " 允许backspace和光标键跨越行边界原为set whichwrap+=<,>,h,l，但会屏敝缩进功能<或>
set shortmess=atI                                   " 启动的时候不显示那个援助索马里儿童的提示
set report=0                                        " 通过使用: commands命令，告诉我们文件的哪一行被改变过
set fillchars=vert:\ ,stl:\ ,stlnc:\                " 在被分割的窗口间显示空白，便于阅读

autocmd! bufwritepost .vimrc source ~/.vimrc        " a修改 vmirc 后自动生效

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" for windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"设定字体
"set guifont=Courier_New:h11:cANSI
"set guifontwide=新宋体:h11:cGB2312

" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
"set mouse=a
"set selection=exclusive
"set selectmode=mouse,key
"set noerrorbells                                   " 不让vim发出讨厌的滴滴声
"set novisualbell                                   " 不要闪烁

" 用空格键来开关折叠
"set foldenable
"set foldmethod=manual

nnoremap  @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 搜索和匹配
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set showmatch                                      " 高亮显示匹配的括号
set matchtime=5                                    " 匹配括号高亮的时间（单位是十分之一秒）
set ignorecase                                     " 在搜索的时候忽略大小写
set hlsearch                                       " 高亮被搜索的句子（phrases）
set incsearch                                      " 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）

"输入:set list命令是应该显示些啥？
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 文本格式和排版
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set formatoptions=tcrqn                            " 自动格式化
set autoindent                                     " 继承前一行的缩进方式，特别适用于多行注释
set smartindent                                    " 为C程序提供自动缩进
set cindent                                        " 使用C样式的缩进
set tabstop=4                                      " 制表符为4
set softtabstop=4                                  " 统一缩进为4
set shiftwidth=4
set expandtab                                      " 用空格代替制表符
set cursorline                                     " 突出显示当前行
set list
set listchars=tab:>-,trail:-              " 显示 TAB 键
"set listchars=tab:>-,header:-,trail:-              " 显示 TAB 键
"set nowrap                                        " 不要换行
"set smartta                                       " 在行和段开始处使用制表符

set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
if &term=="xterm"
	set t_Co=8
    set t_Sb=^[[4%dm
	set t_Sf=^[[3%dm
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

""使用Vundle来管理Vundle
Bundle 'gmarik/vundle'

"PowerLine插件 状态栏增强展示 vim有一个状态栏 加上powline则有两个状态栏
Bundle 'Lokaltog/vim-powerline'
set laststatus=2
set t_Co=256
"let g:Powerline_symbols='unicode'
let g:Powline_symbols='fancy'

Bundle 'Valloric/YouCompleteMe'
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_error_symbol = 'X' "'>>'
let g:ycm_warning_symbol = '!' "'>*'
"let g:syntastic_always_populate_loc_list=1
"nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDefinition<CR>
"nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nmap <F4> :YcmDiags<CR>
""let g:syntastic_ignore_files=[".*\.py$"] "禁用py文件的语法检查
"let g:ycm_min_num_of_chars_for_completion=3
"for ultisnip: Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

Bundle 'majutsushi/tagbar'
"设置打开tagbar窗口快捷键
nmap <F1> :silent! Tlist<CR>
let g:tagbar_autofocus = 1

Bundle 'Valloric/ListToggle'
Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol = 'X'
let g:syntastic_warning_symbol = '!'

Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
Bundle 'The-NERD-tree'
let NERDTreeWinPos ="right"  "将NERDTree的窗口设置在gvim窗口的左边
let NERDTreeShowBookmarks=1 "当打开NERDTree窗口时，自动显示Bookmarks
map <F2> :silent! NERDTreeToggle<CR>

filetype plugin indent on

""""""""""""""""""""" Vundle
"--ctags setting--
"" 按下F5重新生成tag文件，并更新taglist
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=tags
set tags+=./tags "add current directory's generated tags file
set tags+=~/tags "add new tags file(刚刚生成tags的路径，在ctags -R 生成tags文件后，不要将tags移动到别的目录，否则ctrl+］时，会提示找不到源码文件)

"-- Cscope setting --
if has("cscope")
set csprg=/usr/bin/cscope " 指定用来执行cscope的命令
set csto=0                " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
set cst                   " 同时搜索cscope数据库和标签文件
set cscopequickfix=s-,c-,d-,i-,t-,e- " 使用QuickFix窗口来显示cscope查找结果
set nocsverb
if filereadable("cscope.out") "若当前目录下存在cscope数据库，添加该数据库到vim
cs add cscope.out
elseif $CSCOPE_DB != ""  "否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim
cs add $CSCOPE_DB
endif
set csverb
endif
map <F4> :cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
imap <F4> <ESC>:cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
" 将:cs find c等Cscope查找命令映射为<C-_>c等快捷键（按法是先按Ctrl+Shift+-, 然后很快再按下c）
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR><CR> :copen<CR><CR>
"-- Cscope ending --
